#include <Arduino_FreeRTOS.h>
#include <semphr.h>

#define SERIAL_BUFFER_SIZE 64

char txBuffer[SERIAL_BUFFER_SIZE];
char rxBuffer[SERIAL_BUFFER_SIZE];
SemaphoreHandle_t xSerialSemaphore;

void TaskSerial(void *pvParameters);
void TaskTransmit(void *pvParameters);
void TaskReceive(void *pvParameters);

void setup()
{
  Serial.begin(115200);
  while (!Serial) 
  {
    ; 
  }
  
  Serial1.begin(9600);
  while (!Serial1) 
  {
    ; 
  }
  
  xSerialSemaphore = xSemaphoreCreateMutex();
  
  if (xSerialSemaphore != NULL)
  {
    xTaskCreate(TaskSerial, "Serial", 128, NULL, 2, NULL);
   
    xTaskCreate(TaskTransmit, "Transmit", 128, NULL, 1, NULL);
      
    xTaskCreate(TaskReceive, "Receive", 128, NULL, 1, NULL);
      
    vTaskStartScheduler();
  }
}

void loop()
{
 
}

void TaskSerial(void *pvParameters)
{
  (void) pvParameters;
  
  for (;;)
  {
    if (xSemaphoreTake(xSerialSemaphore, (TickType_t)10) == pdTRUE)
    {
      Serial.println("Debug: System running");
      
      xSemaphoreGive(xSerialSemaphore);
    }
    
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void TaskTransmit(void *pvParameters)
{
  (void) pvParameters;
  
  for (;;)
  {
    sprintf(txBuffer, "Data: %lu", millis());
    
    if (xSemaphoreTake(xSerialSemaphore, (TickType_t)10) == pdTRUE)
    {
      Serial.print("Transmitting: ");
      Serial.println(txBuffer);
      
      Serial1.println(txBuffer);
      
      xSemaphoreGive(xSerialSemaphore);
    }
    
    vTaskDelay(500 / portTICK_PERIOD_MS);
  }
}

void TaskReceive(void *pvParameters)
{
  (void) pvParameters;
  
  int index = 0;
  char incomingByte;
  
  for (;;)
  {
    if (Serial1.available() > 0)
    {
      if (xSemaphoreTake(xSerialSemaphore, (TickType_t)10) == pdTRUE)
      {
        incomingByte = Serial1.read();
        
        if (index < SERIAL_BUFFER_SIZE - 1)
        {
          rxBuffer[index] = incomingByte;
          index++;
          
          if (incomingByte == '\n')
          {
            rxBuffer[index] = '\0';  
            
            Serial.print("Received: ");
            Serial.println(rxBuffer);
            
            index = 0;
          }
        } 
        else
        {
          index = 0;
        }
        
        xSemaphoreGive(xSerialSemaphore);
      }
    }
    
    vTaskDelay(1 / portTICK_PERIOD_MS);
  }
}
